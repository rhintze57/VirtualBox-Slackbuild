--- vboxdrv.sh_stock	2023-07-26 17:25:40.504178111 -0400
+++ vboxdrv.sh	2023-07-26 17:32:38.915526199 -0400
@@ -341,80 +341,6 @@
     modinfo "$mod" 2>/dev/null | grep -e "^version:" | tr -s ' ' | cut -d " " -f3
 }
 
-# Reads kernel configuration option.
-kernel_get_config_opt()
-{
-    opt_name="$1"
-    [ -n "$opt_name" ] || return
-
-    # Check if there is a kernel tool which can extract config option.
-    if test -x /lib/modules/"$KERN_VER"/build/scripts/config; then
-        /lib/modules/"$KERN_VER"/build/scripts/config \
-            --file /lib/modules/"$KERN_VER"/build/.config \
-            --state "$opt_name" 2>/dev/null
-    elif test -f /lib/modules/"$KERN_VER"/build/.config; then
-        # Extract config option manually.
-        grep "$opt_name=" /lib/modules/"$KERN_VER"/build/.config | sed -e "s/^$opt_name=//" -e "s/\"//g"
-    fi
-}
-
-# Reads CONFIG_MODULE_SIG_HASH from kernel config.
-kernel_module_sig_hash()
-{
-    kernel_get_config_opt "CONFIG_MODULE_SIG_HASH"
-}
-
-# Returns "1" if kernel module signature hash algorithm
-# is supported by us. Or empty string otherwise.
-module_sig_hash_supported()
-{
-    sig_hashalgo="$1"
-    [ -n "$sig_hashalgo" ] || return
-
-    # Go through supported list.
-    [    "$sig_hashalgo" = "sha1"   \
-      -o "$sig_hashalgo" = "sha224" \
-      -o "$sig_hashalgo" = "sha256" \
-      -o "$sig_hashalgo" = "sha384" \
-      -o "$sig_hashalgo" = "sha512" ] || return
-
-    echo "1"
-}
-
-# Check if kernel configuration requires modules signature.
-kernel_requires_module_signature()
-{
-    vbox_sys_lockdown_path="/sys/kernel/security/lockdown"
-
-    requires=""
-    # We consider that if kernel is running in the following configurations,
-    # it will require modules to be signed.
-    if [ "$(kernel_get_config_opt "CONFIG_MODULE_SIG")" = "y" ]; then
-
-        # Modules signature verification is hardcoded in kernel config.
-        [ "$(kernel_get_config_opt "CONFIG_MODULE_SIG_FORCE")" = "y" ] && requires="1"
-
-        # Unsigned modules loading is restricted by "lockdown" feature in runtime.
-        if [   "$(kernel_get_config_opt "CONFIG_LOCK_DOWN_KERNEL")" = "y" \
-            -o "$(kernel_get_config_opt "CONFIG_SECURITY_LOCKDOWN_LSM")" = "y" \
-            -o "$(kernel_get_config_opt "CONFIG_SECURITY_LOCKDOWN_LSM_EARLY")" = "y" ]; then
-
-            # Once lockdown level is set to something different than "none" (e.g., "integrity"
-            # or "confidentiality"), kernel will reject unsigned modules loading.
-            if [ -r "$vbox_sys_lockdown_path" ]; then
-                [ -n "$(cat "$vbox_sys_lockdown_path" | grep "\[integrity\]")" ] && requires="1"
-                [ -n "$(cat "$vbox_sys_lockdown_path" | grep "\[confidentiality\]")" ] && requires="1"
-            fi
-
-            # This configuration is used by a number of modern Linux distributions and restricts
-            # unsigned modules loading when Secure Boot mode is enabled.
-            [ "$(kernel_get_config_opt "CONFIG_LOCK_DOWN_IN_EFI_SECURE_BOOT")" = "y" -a -n "$HAVE_SEC_BOOT" ] && requires="1"
-        fi
-    fi
-
-    [ -n "$requires" ] && echo "1"
-}
-
 # Returns "1" if module is signed and signature can be verified
 # with public key provided in DEB_PUB_KEY. Or empty string otherwise.
 module_signed()
@@ -673,153 +599,10 @@
     fi
 }
 
-cleanup()
-{
-    # If this is set, only remove kernel modules for no longer installed
-    # kernels.  Note that only generated kernel modules should be placed
-    # in /lib/modules/*/misc.  Anything that we should not remove automatically
-    # should go elsewhere.
-    only_old="${1}"
-    for i in /lib/modules/*; do
-        # Check whether we are only cleaning up for uninstalled kernels.
-        test -n "${only_old}" && test -e "${i}/kernel/drivers" && continue
-
-        unset do_update
-        for j in $MODULE_LIST; do
-            for mod_ext in ko ko.gz ko.xz ko.zst; do
-                test -f "${i}/misc/${j}.${mod_ext}" && do_update=1 && rm -f "${i}/misc/${j}.${mod_ext}"
-            done
-        done
-
-        # Trigger depmod(8) only in case if directory content was modified
-        # and save a bit of run time.
-        test -n "$do_update" && depmod -a "$(basename "$i")" && sync
-
-        # Remove the kernel version folder if it was empty except for us.
-        test   "`echo ${i}/misc/* ${i}/misc/.?* ${i}/* ${i}/.?*`" \
-             = "${i}/misc/* ${i}/misc/.. ${i}/misc ${i}/.." &&
-            rmdir "${i}/misc" "${i}"  # We used to leave empty folders.
-    done
-}
-
 # setup_script
 setup()
 {
-    begin_msg "Building VirtualBox kernel modules" console
-    log "Building the main VirtualBox module."
-
-    # Detect if kernel was built with clang.
-    unset LLVM
-    vbox_cc_is_clang=$(kernel_get_config_opt "CONFIG_CC_IS_CLANG")
-    if test "${vbox_cc_is_clang}" = "y"; then
-        log "Using clang compiler."
-        export LLVM=1
-    fi
-
-    if ! myerr=`$BUILDINTMP \
-        --save-module-symvers /tmp/vboxdrv-Module.symvers \
-        --module-source "$MODULE_SRC/vboxdrv" \
-        --no-print-directory install 2>&1`; then
-        "${INSTALL_DIR}/check_module_dependencies.sh" || exit 1
-        log "Error building the module:"
-        module_build_log "$myerr"
-        failure "Look at $LOG to find out what went wrong"
-    fi
-    log "Building the net filter module."
-    if ! myerr=`$BUILDINTMP \
-        --use-module-symvers /tmp/vboxdrv-Module.symvers \
-        --module-source "$MODULE_SRC/vboxnetflt" \
-        --no-print-directory install 2>&1`; then
-        log "Error building the module:"
-        module_build_log "$myerr"
-        failure "Look at $LOG to find out what went wrong"
-    fi
-    log "Building the net adapter module."
-    if ! myerr=`$BUILDINTMP \
-        --use-module-symvers /tmp/vboxdrv-Module.symvers \
-        --module-source "$MODULE_SRC/vboxnetadp" \
-        --no-print-directory install 2>&1`; then
-        log "Error building the module:"
-        module_build_log "$myerr"
-        failure "Look at $LOG to find out what went wrong"
-    fi
-    if test -e "$MODULE_SRC/vboxpci"; then
-        log "Building the PCI pass-through module."
-        if ! myerr=`$BUILDINTMP \
-            --use-module-symvers /tmp/vboxdrv-Module.symvers \
-            --module-source "$MODULE_SRC/vboxpci" \
-            --no-print-directory install 2>&1`; then
-            log "Error building the module:"
-            module_build_log "$myerr"
-            failure "Look at $LOG to find out what went wrong"
-        fi
-    fi
-    rm -f /etc/vbox/module_not_compiled
-    depmod -a
-    sync
-    succ_msg "VirtualBox kernel modules built"
-
-    # Sign kernel modules if kernel configuration requires it.
-    if test "$(kernel_requires_module_signature)" = "1"; then
-        begin_msg "Signing VirtualBox kernel modules" console
-
-        # Generate new signing key if needed.
-        [ -n "$HAVE_UPDATE_SECUREBOOT_POLICY_TOOL" ] && SHIM_NOTRIGGER=y update-secureboot-policy --new-key
-
-        # Check if signing keys are in place.
-        if test ! -f "$DEB_PUB_KEY" || ! test -f "$DEB_PRIV_KEY"; then
-            # update-secureboot-policy tool present in the system, but keys were not generated.
-            [ -n "$HAVE_UPDATE_SECUREBOOT_POLICY_TOOL" ] && fail_msg "
-
-update-secureboot-policy tool does not generate signing keys
-in your distribution, see below on how to generate them manually
-"
-
-            # update-secureboot-policy not present in the system, recommend generate keys manually.
-            failure "
-
-System is running in Secure Boot mode, however your distribution
-does not provide tools for automatic generation of keys needed for
-modules signing. Please consider to generate and enroll them manually:
-
-    sudo mkdir -p /var/lib/shim-signed/mok
-    sudo openssl req -nodes -new -x509 -newkey rsa:2048 -outform DER -addext \"extendedKeyUsage=codeSigning\" -keyout $DEB_PRIV_KEY -out $DEB_PUB_KEY
-    sudo mokutil --import $DEB_PUB_KEY
-    sudo reboot
-
-Restart \"rcvboxdrv setup\" after system is rebooted
-"
-        fi
-
-        # Check if signing tool is available.
-        [ -n "$SIGN_TOOL" ] || failure "Unable to find signing tool"
-
-        # Get kernel signature hash algorithm from kernel config and validate it.
-        sig_hashalgo=$(kernel_module_sig_hash)
-        [ "$(module_sig_hash_supported $sig_hashalgo)" = "1" ] \
-            || failure "Unsupported kernel signature hash algorithm $sig_hashalgo"
-
-        # Sign modules.
-        for i in $MODULE_LIST; do
-            "$SIGN_TOOL" "$sig_hashalgo" "$DEB_PRIV_KEY" "$DEB_PUB_KEY" \
-                /lib/modules/"$KERN_VER"/misc/"$i".ko 2>/dev/null || failure "Unable to sign $i.ko"
-        done
-
-        # Enroll signing key if needed.
-        if test -n "$HAVE_UPDATE_SECUREBOOT_POLICY_TOOL"; then
-            # update-secureboot-policy "expects" DKMS modules.
-            # Work around this and talk to the authors as soon
-            # as possible to fix it.
-            mkdir -p /var/lib/dkms/vbox-temp
-            update-secureboot-policy --enroll-key 2>/dev/null ||
-                begin_msg "Failed to enroll secure boot key." console
-            rmdir -p /var/lib/dkms/vbox-temp 2>/dev/null
-
-            # Indicate that key has been enrolled and reboot is needed.
-            HAVE_DEB_KEY=true
-        fi
-        succ_msg "Signing completed"
-    fi
+    echo "Not implemented! Please use the virtualbox-kernel.SlackBuild available at SlackBuilds.org instead."
 }
 
 dmnstatus()
@@ -876,14 +659,10 @@
     ## todo Do we need a udev rule to create /dev/vboxdrv[u] at all?  We have
     ## working fall-back code here anyway, and the "right" code is more complex
     ## than the fall-back.  Unnecessary duplication?
-    stop && cleanup
+    stop
     setup_usb "$GROUP" "$DEVICE_MODE" "$INSTALL_DIR"
     start
     ;;
-cleanup)
-    stop && cleanup
-    cleanup_usb
-    ;;
 force-reload)
     stop
     start
